/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package router.demo;
import com.graphhopper.*;
import com.graphhopper.routing.util.*;
import com.graphhopper.util.*;
import com.graphhopper.reader.osm.GraphHopperOSM;
import com.graphhopper.util.*;
import com.graphhopper.util.shapes.GHPoint;

import java.util.List; 
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class App {

    public static void main(String[] args) {

         
        //======================= Route Planning =====================================
        GraphHopper hopper = new GraphHopperOSM().forServer();

        hopper.setDataReaderFile("src/main/resources/bretagne-latest.osm.pbf")
        .setGraphHopperLocation("temp")
        .setEncodingManager(new EncodingManager("foot"))
        .setCHEnabled(false);

        // Load OSM File
        System.out.println("Loading OSM file ...");
        hopper.importOrLoad();

        // Configuring route
        // simple configuration of the request object, see the GraphHopperServlet classes for more possibilities.
        GHRequest req = new GHRequest().
        setVehicle("foot").
        addPoint(new GHPoint(48.4085,-4.4984)).
        setAlgorithm(Parameters.Algorithms.ROUND_TRIP);
        req.getHints().put(Parameters.Algorithms.RoundTrip.DISTANCE,"20000");
        GHResponse rsp = hopper.route(req);

        // first check for errors
        if(rsp.hasErrors()) {
            // handle them!
            System.out.println(rsp.getErrors());
        }

        List<PathWrapper> paths =rsp.getAll();


        PathWrapper path = rsp.getBest();
        PointList pointList = path.getPoints();
        double distance = path.getDistance();
        long timeInMs = path.getTime();
        
        InstructionList il = path.getInstructions();
   
        // or get the json
        List<Map<String, Object>> iList = il.createJson();
        
        System.out.println("Everything worked !");
        System.out.println("==============================================================================");
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String prettyJsonString = gson.toJson(iList);
        System.out.println(path.getDistance());
        System.out.println("==============================================================================");
        String itineraire =path.getPoints().toString().replace('(', '[').replace(')', ']');
        System.out.println("==============================================================================");
        System.out.println(itineraire);
    }
}
